class t{constructor(t){this.app=t,this.tasks=[]}add(t){this.tasks.push(t)}animate(){requestAnimationFrame(this.animate.bind(this)),this.tasks.forEach((t=>t())),this.app.renderer.render(this.app.scene,this.app.camera)}}class s{constructor(t,s){this.app=t,this.THREE=t.THREE,this.settings={load:()=>{this.app.init()},progress:(t,s,e)=>{},gltfExtensions:[".gltf",".glb"],objExtensions:[".obj"],textureExtensions:[".jpg",".jpeg",".png",".gif",".bmp",".tga"],...s},this.manager=new this.THREE.LoadingManager((()=>this.settings.load()),((t,s,e)=>this.settings.progress(t,s,e))),this.setUpLoaders()}setUpLoaders(){this.TextureLoader=!1,this.GLTFLoader=!1,this.OBJLoader=!1,this.app.settings.GLTFLoader&&(this.GLTFLoader=new this.app.settings.GLTFLoader(this.manager)),this.app.settings.OBJLoader&&(this.OBJLoader=new this.app.settings.OBJLoader(this.manager)),this.TextureLoader=new this.THREE.TextureLoader(this.manager)}load(){for(const t in this.app.settings.preload){let s=this.app.settings.preload[t];this.endsWith(s,this.settings.gltfExtensions)&&this.GLTFLoader.load(s,(s=>{this.app[t]=s.scene})),this.endsWith(s,this.settings.objExtensions)&&this.OBJLoader.load(s,(s=>{this.app[t]=s})),this.endsWith(s,this.settings.textureExtensions)&&this.TextureLoader.load(s,(s=>{this.app[t]=s,this.setUpTexture(this.app[t])}))}}endsWith(t,s){return s.some((s=>t.endsWith(s)))}setUpTexture(t){t.encoding=this.THREE.sRGBEncoding,t.wrapT=this.THREE.RepeatWrapping,t.wrapS=this.THREE.RepeatWrapping}}class e{constructor(t){this.app=t,this.tasks=[]}add(t){this.tasks.push(t)}load(){this.tasks.forEach((t=>t()))}}class i{constructor(i,a){this.settings={light:!0,...a},this.THREE=i,this.setSize(),this.animator=new t(this),this.scene=new i.Scene,this.renderer=new i.WebGLRenderer({antialias:!0}),this.renderer.setSize(this.sizes.w,this.sizes.h),this.renderer.setPixelRatio(Math.min(2,window.devicePixelRatio)),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=i.PCFSoftShadowMap,this.renderer.physicallyCorrectLights=!0,this.renderer.outputEncoding=i.sRGBEncoding,this.renderer.toneMapping=i.ReinhardToneMapping,this.camera=new i.PerspectiveCamera(75,this.sizes.w/this.sizes.h,1,200),this.camera.position.x=0,this.camera.position.y=0,this.camera.position.z=2,this.scene.add(this.camera),this.loader=new s(this),this.postLoader=new e(this),this.settings.light&&(this.light=new i.AmbientLight(16777215,1),this.scene.add(this.light)),this.clock=new i.Clock,this.clock.start(),document.body.appendChild(this.renderer.domElement),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.preload()}setSize(){this.sizes={w:window.innerWidth,h:window.innerHeight}}preload(){this.settings.preload?this.loader.load():this.init()}postload(t){this.postLoader.add(t)}animate(t){this.animator.add(t)}init(){this.postLoader.load(),this.animator.animate()}onWindowResize(){this.setSize(),this.camera.aspect=this.sizes.w/this.sizes.h,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.sizes.w,this.sizes.h),this.renderer.setPixelRatio(Math.min(2,window.devicePixelRatio))}}export{i as default};
