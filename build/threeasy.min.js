class s{constructor(s){this.app=s,this.tasks=[]}add(s){this.tasks.push(s)}animate(){requestAnimationFrame(this.animate.bind(this)),this.tasks.forEach((s=>s())),this.app.render()}}class t{constructor(s,t){this.app=s,this.THREE=s.THREE,this.settings={load:()=>{this.app.init()},progress:(s,t,e)=>{},gltfExtensions:[".gltf",".glb"],objExtensions:[".obj"],textureExtensions:[".jpg",".jpeg",".png",".gif",".bmp",".tga"],...t},this.manager=new this.THREE.LoadingManager((()=>this.settings.load()),((s,t,e)=>this.settings.progress(s,t,e))),this.setUpLoaders()}setUpLoaders(){this.TextureLoader=!1,this.GLTFLoader=!1,this.OBJLoader=!1,this.app.settings.GLTFLoader&&(this.GLTFLoader=new this.app.settings.GLTFLoader(this.manager)),this.app.settings.OBJLoader&&(this.OBJLoader=new this.app.settings.OBJLoader(this.manager)),this.TextureLoader=new this.THREE.TextureLoader(this.manager)}load(){for(const s in this.app.settings.preload){let t=this.app.settings.preload[s];this.endsWith(t,this.settings.gltfExtensions)&&(this.GLTFLoader?this.GLTFLoader.load(t,(t=>{this.app[s]=t.scene})):console.warn(`ThreeasyLoader: GLTFLoader is not defined trying to load: ${t}`)),this.endsWith(t,this.settings.objExtensions)&&(this.OBJLoader?this.OBJLoader.load(t,(t=>{this.app[s]=t})):console.warn(`ThreeasyLoader: OBJLoader is not defined trying to load: ${t}`)),this.endsWith(t,this.settings.textureExtensions)&&this.TextureLoader.load(t,(t=>{this.app[s]=t,this.setUpTexture(this.app[s])}))}}endsWith(s,t){return t.some((t=>s.endsWith(t)))}setUpTexture(s){s.encoding=this.THREE.sRGBEncoding,s.wrapT=this.THREE.RepeatWrapping,s.wrapS=this.THREE.RepeatWrapping}}class e{constructor(s){this.app=s,this.tasks=[]}add(s){this.tasks.push(s)}load(){this.tasks.forEach((s=>s()))}}class i{constructor(i,a){this.settings={light:!0,...a},this.THREE=i,this.setSize(),this.animator=new s(this),this.scene=new i.Scene,this.camera=new i.PerspectiveCamera(75,this.sizes.w/this.sizes.h,1,200),this.camera.position.x=0,this.camera.position.y=0,this.camera.position.z=2,this.scene.add(this.camera),this.renderer=new i.WebGLRenderer({antialias:!0}),this.renderer.setSize(this.sizes.w,this.sizes.h),this.renderer.setPixelRatio(Math.min(2,window.devicePixelRatio)),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=i.PCFSoftShadowMap,this.renderer.physicallyCorrectLights=!0,this.renderer.outputEncoding=i.sRGBEncoding,this.renderer.toneMapping=i.ACESFilmicToneMapping,this.models={},this.textures={},this.loader=new t(this),this.postLoader=new e(this),this.settings.light&&(this.light=new i.AmbientLight(16777215,1),this.scene.add(this.light)),this.clock=new i.Clock,this.clock.start(),document.body.appendChild(this.renderer.domElement),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.preload()}setSize(){this.sizes={w:window.innerWidth,h:window.innerHeight}}preload(){this.settings.preload?this.loader.load():this.init()}postload(s){this.postLoader.add(s)}render(){this.renderer.render(this.scene,this.camera)}animate(s){this.animator.add(s)}init(){this.postLoader.load(),this.animator.animate()}resize(){this.setSize(),this.camera.aspect=this.sizes.w/this.sizes.h,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.sizes.w,this.sizes.h),this.renderer.setPixelRatio(Math.min(2,window.devicePixelRatio))}onWindowResize(){this.resize()}}export{i as default};
