class s{constructor(s){this.sketch=s,this.tasks=[]}add(s){this.tasks.push(s)}animate(){requestAnimationFrame(this.animate.bind(this)),this.tasks.forEach((s=>s())),this.sketch.renderer.render(this.sketch.scene,this.sketch.camera)}}class t{constructor(s,t){this.sketch=s,this.THREE=s.THREE,this.settings={load:()=>{this.sketch.init()},progress:(s,t,e)=>{},gltfExtensions:[".gltf",".glb"],objExtensions:[".obj"],textureExtensions:[".jpg",".jpeg",".png",".gif",".bmp",".tga"],...t},this.manager=new this.THREE.LoadingManager((()=>this.settings.load()),((s,t,e)=>this.settings.progress(s,t,e))),this.setUpLoaders()}setUpLoaders(){this.TextureLoader=!1,this.GLTFLoader=!1,this.OBJLoader=!1,this.sketch.settings.GLTFLoader&&(this.GLTFLoader=new this.sketch.settings.GLTFLoader(this.manager)),this.sketch.settings.OBJLoader&&(this.OBJLoader=new this.sketch.settings.OBJLoader(this.manager)),this.TextureLoader=new this.THREE.TextureLoader(this.manager)}load(){for(const s in this.sketch.settings.preload){let t=this.sketch.settings.preload[s];if(this.settings.gltfExtensions.some((s=>t.endsWith(s))))this.GLTFLoader.load(t,(t=>{this.sketch[s]=t.scene}));else{if(this.settings.objExtensions.some((s=>t.endsWith(s))))this.OBJLoader.load(t,(t=>{console.log(t),this.sketch[s]=t}));else{this.settings.textureExtensions.some((s=>t.endsWith(s)))&&this.TextureLoader.load(t,(t=>{this.sketch[s]=t,this.setUpTexture(this.sketch[s])}))}}}}setUpTexture(s){this.THREE.sRGBEncoding,this.THREE.RepeatWrapping,this.THREE.RepeatWrapping}}class e{constructor(s){this.sketch=s,this.tasks=[]}add(s){this.tasks.push(s)}load(){this.tasks.forEach((s=>s()))}}class i{constructor(i,h){this.settings={light:!0,...h},this.THREE=i,this.setSize(),this.animator=new s(this),this.scene=new i.Scene,this.renderer=new i.WebGLRenderer({antialias:!0}),this.renderer.setSize(this.sizes.w,this.sizes.h),this.renderer.setPixelRatio(Math.min(2,window.devicePixelRatio)),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=i.PCFSoftShadowMap,this.renderer.physicallyCorrectLights=!0,this.renderer.outputEncoding=i.sRGBEncoding,this.renderer.toneMapping=i.ACESFilmicToneMapping,this.camera=new i.PerspectiveCamera(75,this.sizes.w/this.sizes.h,1,200),this.camera.position.x=0,this.camera.position.y=0,this.camera.position.z=2,this.scene.add(this.camera),this.loader=new t(this),this.postLoader=new e(this),this.settings.light&&(this.light=new i.HemisphereLight(16777147,526368,1),this.scene.add(this.light)),this.clock=new i.Clock,this.clock.start(),document.body.appendChild(this.renderer.domElement),window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.preload()}setSize(){this.sizes={w:window.innerWidth,h:window.innerHeight}}preload(){this.settings.preload?this.loader.load():this.init()}init(){this.postLoader.load(),this.animator.animate()}onWindowResize(){this.setSize(),this.camera.aspect=this.sizes.w/this.sizes.h,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.sizes.w,this.sizes.h),this.renderer.setPixelRatio(Math.min(2,window.devicePixelRatio))}}export{i as default};
